CLASS lhc_ZI_TRAVEL_PS_M DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR zi_travel_ps_m RESULT result.

    METHODS earlynumbering_create FOR NUMBERING
      IMPORTING entities FOR CREATE zi_travel_ps_m.

    METHODS earlynumbering_cba_Booking FOR NUMBERING
      IMPORTING entities FOR CREATE zi_travel_ps_m\_Booking.

    METHODS acceptTravel FOR MODIFY
      IMPORTING keys FOR ACTION zi_travel_ps_m~acceptTravel RESULT result.

    METHODS copyTravel FOR MODIFY
      IMPORTING keys FOR ACTION zi_travel_ps_m~copyTravel.

    METHODS recalcTotPrice FOR MODIFY
      IMPORTING keys FOR ACTION zi_travel_ps_m~recalcTotPrice.

    METHODS rejectTravel FOR MODIFY
      IMPORTING keys FOR ACTION zi_travel_ps_m~rejectTravel RESULT result.

ENDCLASS.

CLASS lhc_ZI_TRAVEL_PS_M IMPLEMENTATION.

  METHOD get_instance_authorizations.
  ENDMETHOD.

  METHOD earlynumbering_create.

     DATA(lt_entities) = entities.

  DELETE lt_entities WHERE TravelId IS NOT INITIAL.

   TRY.
      cl_numberrange_runtime=>number_get(
        EXPORTING
          nr_range_nr       = '01'
          object            = '/DMO/TRV_M'
          quantity          = CONV #( lines( lt_entities ) )
        IMPORTING
          number            =  DATA(lv_latest_num)
          returncode        =  DATA(lv_code)
          returned_quantity =  DATA(lv_qty)
      ).
    CATCH cx_nr_object_not_found.
    CATCH cx_number_ranges INTO DATA(lo_error).

      LOOP AT lt_entities  INTO DATA(ls_entities).
        APPEND VALUE #( %cid =  ls_entities-%cid
                        %key = ls_entities-%key  )
               TO failed-zi_travel_ps_m.
        APPEND VALUE #( %cid =  ls_entities-%cid
                        %key = ls_entities-%key
                        %msg =  lo_error )
               TO reported-zi_travel_ps_m.

      ENDLOOP.
      EXIT.
  ENDTRY.
  ASSERT lv_qty = lines( lt_entities ).

*   DATA: lt_travel_tech_m TYPE TABLE FOR MAPPED EARLY yi_travel_tech_m,
*          ls_travel_tech_m LIKE LINE OF lt_travel_tech_m.
  DATA(lv_curr_num)   =  lv_latest_num - lv_qty.

  LOOP AT lt_entities  INTO ls_entities.

    lv_curr_num = lv_curr_num + 1.
*      ls_travel_tech_m = VALUE #( %cid =  ls_entities-%cid
*                                  TravelId = lv_curr_num
*       ) .
*      APPEND ls_travel_tech_m TO mapped-yi_travel_tech_m.
    APPEND VALUE #( %cid =  ls_entities-%cid
                    TravelId = lv_curr_num  )
             TO mapped-zi_travel_ps_m.
   ENDLOOP.

  ENDMETHOD.

  METHOD earlynumbering_cba_Booking.

     DATA : lv_max_booking TYPE /dmo/booking_id.

  READ ENTITIES OF zi_travel_ps_m IN LOCAL MODE
   ENTITY zi_travel_ps_m BY \_Booking
   FROM CORRESPONDING #( entities )
   LINK DATA(lt_link_data).

   LOOP AT entities ASSIGNING FIELD-SYMBOL(<ls_group_entity>)
                             GROUP BY <ls_group_entity>-TravelId .


    lv_max_booking = REDUCE #( INIT lv_max = CONV /dmo/booking_id( '0' )
                               FOR ls_link IN lt_link_data USING KEY entity
                                    WHERE ( source-TravelId = <ls_group_entity>-TravelId  )
                               NEXT  lv_max = COND  /dmo/booking_id( WHEN lv_max < ls_link-target-BookingId
                                                                     THEN ls_link-target-BookingId
                                                                      ELSE lv_max ) ).
    lv_max_booking  = REDUCE #( INIT lv_max = lv_max_booking
                                 FOR ls_entity IN entities USING KEY entity
                                     WHERE ( TravelId = <ls_group_entity>-TravelId  )
                                   FOR ls_booking IN ls_entity-%target
                                   NEXT lv_max = COND  /dmo/booking_id( WHEN lv_max < ls_booking-BookingId
                                                                      THEN ls_booking-BookingId
                                                                       ELSE lv_max )
     ).
    LOOP AT entities ASSIGNING FIELD-SYMBOL(<ls_entities>)
                      USING KEY entity
                       WHERE TravelId = <ls_group_entity>-TravelId.

      LOOP AT <ls_entities>-%target ASSIGNING FIELD-SYMBOL(<ls_booking>).
        APPEND CORRESPONDING #( <ls_booking> )  TO   mapped-zi_booking_ps_m
           ASSIGNING FIELD-SYMBOL(<ls_new_map_book>).
        IF <ls_booking>-BookingId IS INITIAL.
          lv_max_booking += 10.


          <ls_new_map_book>-BookingId = lv_max_booking.
        ENDIF.

      ENDLOOP.



    ENDLOOP.

  ENDLOOP.

  ENDMETHOD.

  METHOD acceptTravel.
  ENDMETHOD.

  METHOD copyTravel.
  ENDMETHOD.

  METHOD recalcTotPrice.
  ENDMETHOD.

  METHOD rejectTravel.
  ENDMETHOD.

ENDCLASS.
